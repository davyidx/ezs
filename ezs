#!/usr/bin/env lua

local path = "/usr/share/.ezs"

-- popexec function
local function popexec(str)
	local handle = io.popen(str)
	local result = handle:read("*a")
	handle:close()
	return result
end

-- current tty
local tty = popexec('echo $XDG_VTNR')
tty = string.gsub(tty, "\n", "")
if tty ~= "1" then os.exit() end

io.stdin = io.popen("/dev/tty2", "r")
io.stdout = io.popen("/dev/tty2", "w")

-- directories
local xsessions = "/usr/share/xsessions/"
local wsessions = "/usr/share/wayland-sessions/"

-- get children function
local function getChildren(dir)
    local rawList = popexec('ls -a '..dir)
    local splitList = {}

    for str in string.gmatch(rawList, "([^".."\n".."]+)") do
        table.insert(splitList, str)
    end

    return splitList
end

::reshow::
os.execute('clear')

local sessions = {}

-- fetch function
local function fetch(dir, tag)

    for i, file in ipairs(getChildren(dir)) do

        -- look for .desktop files inside the directory
        if string.match(tostring(file), "%.desktop$") then
            local isession = {}

            -- get readable name
            local name = popexec('cd '..dir..'; cat '..file..' | grep -m 1 Name=')
            name = string.gsub(name, "Name=", "")
            name = string.gsub(name, "\n", "")
            table.insert(isession, name)

            -- get session command
            local command = popexec('cd '..dir..'; cat '..file..' | grep -m 1 Exec=')
            command = string.gsub(command, "Exec=", "")
            command = string.gsub(command, "\n", "")
            table.insert(isession, command)

            -- tag insert
            table.insert(isession, tag)

            -- return session's info to main session table
            table.insert(sessions, isession)
        end
    end
end

fetch(xsessions, "x")
fetch(wsessions, "w")

-- get default session array:
local default_session = ""
local dfs = {}

for i, file in ipairs(getChildren(path)) do
    if tostring(file) == ".default_session" then
        default_session = popexec('cd '..path..'; cat '..file)
    end
end

for str in string.gmatch(default_session, "([^".."\n".."]+)") do
    table.insert(dfs, str)
end

-- get default cursor
local cursor = 1
for i, file in ipairs(getChildren(path)) do
    if tostring(file) == ".default_cursor" then
        local num = popexec('cd '..path..'; cat '..file)
        if tonumber(num) ~= nil then
            cursor = tonumber(num)
        end
    end
end

-- // prints
-- clean func to ensure correctness
local function clean(str)
    local cleaned = string.gsub(str, "[\n%s]", "")
    return cleaned
end

-- welcome
local banner = string.gsub(popexec('echo "$(lsb_release -d | cut -f2) $(uname -r) (tty$(tty | grep -o "[0-9]*$"))"'), "\n", "")
local user = popexec('echo $USER')
print(banner..' logged as: '..user)

-- title
print("\27[90m[ezs]: v0.7\tsession manager\27[0m")

-- // chain prints
for i, s in ipairs(sessions) do

    -- vars
    local isdefault = false
    local cursoron = false

    local chain = s[3].."\t"..s[1]
    local indexA = '  '..i..'  : '
    local indexB = '[ '..i..' ]: '

    -- sets default if it is
    if default_session ~= "" and clean(s[1]) == clean(dfs[1]) and clean(s[2]) == clean(dfs[2]) and clean(s[3]) == clean(dfs[3]) then
        isdefault = true
    end

    -- sets cursoron if it is
    if cursor == i then
       cursoron = true
    end

    -- adjustments
    if cursoron then
        if isdefault then
            chain = '\27[92m'..indexB..s[3].."\t"..s[1]..' *'..'\27[0m'
        else
            chain = '\27[97m'..indexB..s[3].."\t"..s[1]..' *'..'\27[0m'
        end
    else
        if isdefault then
            chain = '\27[92m'..indexA..s[3].."\t"..s[1]..'\27[0m'
        else
            chain = indexA..s[3].."\t"..s[1]
        end
    end

    print(chain)
end

-- input prompt
local prompt = ""

if default_session ~= "" and clean(sessions[cursor][1]) == clean(dfs[1]) and clean(sessions[cursor][2]) == clean(dfs[2]) and clean(sessions[cursor][3]) == clean(dfs[3]) then
    prompt = "[ini]"
else
    prompt = "[set]"
end

io.write('\27[90m'..prompt..': \27[0m')
local input = io.read()

-- // logic
if input == "" then
    -- set default_cursor
    os.execute('cd '..path..'; echo -e "'..cursor..'" > .default_cursor')
    
    local isdefault = false
    if default_session ~= "" and clean(sessions[cursor][1]) == clean(dfs[1]) and clean(sessions[cursor][2]) == clean(dfs[2]) and clean(sessions[cursor][3]) == clean(dfs[3]) then
        isdefault = true
        if sessions[cursor][3] == "x" then
            -- enters
            
        else
            -- enters
            os.execute('set XINITRC '..sessions[cursor][2]..' ; startx')
        end
    end

    -- set default_session
    os.execute('cd '..path..'; echo -e "'..sessions[cursor][1].."\n"..sessions[cursor][2].."\n"..sessions[cursor][3]..'" > .default_session')

    if isdefault then
        os.exit()
    else
        goto reshow
    end

-- selects 
elseif tonumber(input) ~= nil and tonumber(input) > 0 and tonumber(input) <= #sessions then
    -- set default_cursor
    os.execute('cd '..path..'; echo -e "'..input..'" > .default_cursor')
end

goto reshow